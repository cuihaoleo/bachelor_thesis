同学们老师们好，我是崔灏，我毕业设计的题目是《多线程并行 InSAR 数据处理程序的设计与实现》，由查显杰老师指导完成。

[翻页]
与多数同学的课题有所不同，这是一个偏工程应用的课题。一方面，由于我个人未来会在信院的实验室做图像处理的研究，所以毕业设计选择了一个比较贴合今后工作的课题。另一方面，我在大创课题中进行过 InSAR 数据处理工作，也确实感到优化算法的必要性。

我的答辩如论文内容一样，分为课题介绍、算法设计、实验评估三个部分。

[翻页]    
合成孔径雷达干涉成像 InSAR 技术是一种重要的高程测量的手段。
以这个简化的模型为例，重复轨道测量模式下 SAR 雷达两次分别经过 A1、A2 位置，以略微不同的视角观察地面目标C，得到两幅 SAR 图像。提取两幅图像的相位差（也就是干涉成像），干涉相位是雷达基线B和视角theta的函数。在雷达轨道已知的情况下，就可以通过简单的几何关系算出地表高程信息。

实际的干涉图包含地球曲率、地形、地表形变等多种相位信息。根据应用不同，可以提取出需要的信息。通过 InSAR 技术可以取得数日到数年时间上厘米级的地表形变信息，可以说是地球物理研究的重要数据源。


[翻页]
虽然原理不难，InSAR 数据处理却是一个复杂的过程。在干涉成像之前，要对 SAR 图像进行筛选、拼接等预处理，然后进行配准。成像后还需要进行相位解缠以得到连续的高程或形变场。InSAR 数据处理的数据量也非常大，一个 ALOS 卫星图像帧就包含数亿个像素点。在我们的桌面工作站上利用 GMTSAR 等软件进行 InSAR 数据处理工作，处理一对 SAR 图像帧就需要数十分钟时间。

现在的计算机往往配置了多核心 CPU，通过并行计算可以使总体计算性能突破主频限制。但 GMTSAR 这些软件是串行程序，并不能利用多核 CPU。因此我希望实现一个并行 InSAR 处理算法，提高数据处理效率。

[翻页]
受时间所限，我最后选取了 InSAR 数据处理中计算复杂度较高的两个模块：图像配准和图像拼接，参考 GMTSAR 的串行程序进行了并行优化。关于其他模块的并行优化，我在论文中进行了一些讨论。右图可以看到这两个模块在整个 InSAR 数据处理过程中的位置。


[翻页]
首先介绍的是图像配准算法。简单来讲，两幅 SAR 图像成像区域不可能完全重合，所以干涉成像之前要通过图像配准校正畸变。

GMTSAR 将主、副 SAR 图像之间的坐标转换视作一个二维仿射变换，包含6个参数。为了拟合出这6个参数，xcorr 程序首先通过轨道参数估计出一个全局的粗配准偏移量，然后在整个图像中选取若干个采样点，在局部计算出精配准偏移。最后用最小二乘法拟合出仿射变换参数。

局部精配准是算法的主体，是通过局部计算互相关矩阵、寻找使得互相关最大的偏移量得到的。而为了得到次像素精度的偏移量，要采取插值操作。第一步对SAR数据距离向插值是为了补偿轨道参数在距离向较低的精度。后一步则是对互相关矩阵进行插值。

插值和互相关计算都可以通过 FFT 变换高效完成。

[翻页]
在我的优化程序中，首先考察了这些 FFT 算法。实际上计算互相关时，只需要使用 SAR 图像像素幅值（也就是散射系数幅值）信息，所以一部分 FFT 算法可以简化为实序列 FFT 算法。理论上实序列 FFT 算法可以节约一半的计算时间。   

[翻页]
接下来是并行算法的实现。考虑到数据规模和任务分割粒度，我设计了这样的一个主-副多线程架构，由一个主线程预读取 SAR 数据文件，并启动计算线程进行局部配准。局部配准和 SAR 数据预读取是异步进行的。

对于 GMTSAR 默认的 512 个采样窗口，完全是可以平均而充分地利用桌面多核 CPU 的。此外，单一线程顺序读写也避免文件操作的竞争，可以充分发挥磁盘顺序读写优势。

[翻页]
图像拼接是另一个常用的 InSAR 数据处理操作。地震学研究可能需要几百km尺度上的 SAR/InSAR 图像，而在卫星测绘中可能达到上千km尺度。SAR 卫星单次成像区域是有限的，因此要进行图像拼接。

该问题的显著特点是，要从多个输入得到单一的输出，并保持图像拼接的顺序。因此不像图像配准那样明显地可分为较小的算法单元。

[翻页]
对于这样一个数学上讲 可结合但不可交换 运算的并行化，我使用了一种称为规约的并行技术。如图，其基本思路是将任务分组为连续子文件序列上的拼接操作，下一轮将上一轮合并后的结果分组拼接，不断迭代直至完成。

规约算法中，计算任务的分配并不完全平衡，最终将收敛为单线程。但仍然是一种有效的并行算法。

[翻页]

最后一部分，我们在这样一个多核CPU服务器上，用 ALOS 卫星数据对一次地震前后的 SAR 图像对并行算法进行了测试。


[翻页]

首先展示的是 6 帧 SAR 图像拼接效率。这个数据量有点少了，但在地震学研究中一般就用这么多。

左图是计算时间，右图是 CPU 利用率。可以看到，由于数据太少，算法其实很快就收敛到单线程了。但是并行化后仍然节省了一半左右的时间。

[翻页]
接下来展示的是图像配准算法的效率。这里对比了 GMTSAR 的配准程序，本课题重写的配准程序 xcorr2 的单线程版本和多线程版本。可以看到，单线程就就有了很显著的效率提升，多线程并行算法更是加速了 6～30 倍。

仅仅从并行优化的角度，最大加速比是不可能超过并行线程数的。但这里并不是对 GMTSAR 的简单改写，而是基于同样算法的重写，编译器优化等因素也会为程序优化加分。

[翻页]
为了说明配准结果的可靠性，这里对 GMTSAR 与优化后 xcorr2 程序的局部精配准结果进行了比较。图中白色区域由于互相关性太差，GMTSAR 会将其滤除，我也照搬了过来。第三幅图显示了精配准矢量的差值大小，可以看到，两个配准的结果是相当接近的。

[翻页]

下一个比较配准结果的指标是相干性。相干性衡量了配准后两幅 SAR 图像之间的散射系数匹配程度，在这个相干图中也可以看出一定的断层分布。

我们将两个程序配准后的相干图做一个差进行比较

[翻页]

可以看到，虽然结果略有差异，但是相当小。因此可以说明，GMTSAR xcorr 程序和优化后的 xcorr2 程序配准结果无精度差异。

[翻页]

最后说明的是，在本课题实施过程中，我和 GMTSAR 开发者也有很多交流，并反映了一些该程序的问题。

另外，本课题的全部代码也都放在 GitHub 上开源了。

[翻页]

我的答辩的内容基本就是这些，感谢各位聆听，欢迎批评指正。
